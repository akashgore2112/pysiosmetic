window.addEventListener('load', () => {
  const mount = document.getElementById('pain-assessment');
  if (!mount) return;

  const template = `
    <section class="pain-assessment-section">
      <div class="assessment-shell">
        <header class="assessment-header">
          <div class="header-left">
            <span class="badge" data-i18n="badge">AI GUIDED MODULE</span>
            <h1 data-i18n="title">Advanced Pain Assessment</h1>
            <p data-i18n="subtitle">Follow the guided experience to map your discomfort, understand possible causes, and receive recovery recommendations powered by our physiotherapy AI.</p>
          </div>
          <div class="header-right">
            <div class="lang-switch" role="group" aria-label="Language switcher">
              <button type="button" class="lang-btn active" data-lang="en">EN</button>
              <button type="button" class="lang-btn" data-lang="hi">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</button>
              <button type="button" class="lang-btn" data-lang="rg">Regional</button>
            </div>
          </div>
        </header>

        <div class="progress-track">
          <div class="progress-bar">
            <div class="progress-fill"></div>
          </div>
          <div class="progress-steps">
            <span class="progress-dot active" data-step="0"></span>
            <span class="progress-dot" data-step="1"></span>
            <span class="progress-dot" data-step="2"></span>
          </div>
        </div>

        <div class="assessment-grid">
          <div class="interaction-stack">
            <article class="question-card" data-step="0">
              <h2 data-i18n="step1Title">Where is your pain most noticeable?</h2>
              <p data-i18n="step1Description">Select the region that best represents your current discomfort. The AI heatmap will adapt instantly.</p>
              <div class="region-grid">
                <button class="region-button" data-region="neck">
                  <strong data-i18n="region-neck-title">Neck & Upper Spine</strong>
                  <span data-i18n="region-neck-desc">Tension, stiffness, postural strain</span>
                </button>
                <button class="region-button" data-region="shoulder">
                  <strong data-i18n="region-shoulder-title">Shoulder Complex</strong>
                  <span data-i18n="region-shoulder-desc">Rotator cuff, impingement, soreness</span>
                </button>
                <button class="region-button" data-region="lower_back">
                  <strong data-i18n="region-lower_back-title">Lower Back</strong>
                  <span data-i18n="region-lower_back-desc">Lumbar tightness, nerve irritation</span>
                </button>
                <button class="region-button" data-region="knee">
                  <strong data-i18n="region-knee-title">Knee & Mobility</strong>
                  <span data-i18n="region-knee-desc">Ligament strain, instability, swelling</span>
                </button>
              </div>
            </article>

            <article class="question-card" data-step="1" hidden>
              <h2 data-i18n="step2Title">How intense and what type of pain are you feeling?</h2>
              <p data-i18n="step2Description">Adjust the slider and choose the sensation that best describes your experience today.</p>
              <div class="slider-row">
                <label for="pain-intensity" data-i18n="intensityLabel">Intensity</label>
                <input id="pain-intensity" type="range" min="1" max="10" value="4" />
                <output id="intensity-output">4</output>
              </div>
              <label for="pain-type" data-i18n="painTypeLabel">Pain character</label>
              <select id="pain-type">
                <option value="sharp" data-i18n-option="painSharp">Sharp / stabbing</option>
                <option value="dull" data-i18n-option="painDull">Dull ache</option>
                <option value="throbbing" data-i18n-option="painThrobbing">Throbbing / pulsating</option>
                <option value="burning" data-i18n-option="painBurning">Burning / tingling</option>
              </select>
              <label for="pain-notes" data-i18n="notesLabel">Add any triggers or notes</label>
              <textarea id="pain-notes" data-i18n-placeholder="notesPlaceholder" placeholder="E.g. worse after desk work, improves with rest"></textarea>
            </article>

            <article class="question-card" data-step="2" hidden>
              <h2 data-i18n="step3Title">How long has this pain persisted?</h2>
              <p data-i18n="step3Description">Tell us about duration and your current recovery goals so we can tune the plan.</p>
              <label for="pain-duration" data-i18n="durationLabel">Duration</label>
              <select id="pain-duration">
                <option value="0-2" data-i18n-option="durationShort">0 - 2 weeks</option>
                <option value="2-6" data-i18n-option="durationMid">2 - 6 weeks</option>
                <option value="6-12" data-i18n-option="durationLong">6 - 12 weeks</option>
                <option value="12+" data-i18n-option="durationChronic">12+ weeks</option>
              </select>
              <p data-i18n="goalPrompt">Select your recovery priorities</p>
              <div class="checkbox-grid">
                <label class="checkbox-tile">
                  <input type="checkbox" value="mobility" />
                  <span class="indicator">‚úì</span>
                  <span class="label" data-i18n="goalMobility">Regain mobility & strength</span>
                </label>
                <label class="checkbox-tile">
                  <input type="checkbox" value="stability" />
                  <span class="indicator">‚úì</span>
                  <span class="label" data-i18n="goalStability">Improve joint stability</span>
                </label>
                <label class="checkbox-tile">
                  <input type="checkbox" value="endurance" />
                  <span class="indicator">‚úì</span>
                  <span class="label" data-i18n="goalEndurance">Boost functional endurance</span>
                </label>
                <label class="checkbox-tile">
                  <input type="checkbox" value="relief" />
                  <span class="indicator">‚úì</span>
                  <span class="label" data-i18n="goalRelief">Sustain pain relief</span>
                </label>
              </div>
            </article>

            <div class="navigation-controls">
              <button type="button" class="prev-step" disabled data-i18n="backButton">Back</button>
              <button type="button" class="next-step" data-i18n="nextButton">Next Step</button>
            </div>
          </div>

          <aside class="insight-stack">
            <article class="visual-card">
              <h2 data-i18n="visualTitle">Your personalised pain map</h2>
              <div class="body-visual" data-region="" aria-live="polite">
                <img class="body-silhouette" src="https://cdn.jsdelivr.net/gh/physiosmetic/assets/spine-outline.svg" alt="Body silhouette" />
                <div class="heatmap-overlay"></div>
              </div>
              <div class="visual-legend">
                <span data-i18n="visualLegend">Heat intensity increases with reported pain levels</span>
                <span class="active-region" data-i18n="visualInactive">No region selected</span>
              </div>
            </article>

            <article class="insight-card" data-insight="cause">
              <h3><span class="icon">üß†</span><span data-i18n="causeTitle">Likely pain driver</span></h3>
              <p class="insight-text" data-i18n-dynamic="causeText">Select a body region to reveal possible clinical patterns.</p>
            </article>

            <article class="insight-card" data-insight="therapy">
              <h3><span class="icon">ü§ù</span><span data-i18n="therapyTitle">Suggested therapy focus</span></h3>
              <p class="insight-text" data-i18n-dynamic="therapyText">We'll outline a hands-on and active plan once inputs are complete.</p>
            </article>

            <article class="insight-card" data-insight="recovery">
              <h3><span class="icon">‚è±Ô∏è</span><span data-i18n="recoveryTitle">Estimated recovery outlook</span></h3>
              <div class="summary-panel">
                <p class="insight-text" data-i18n-dynamic="recoveryText">Share duration and goals to calculate a personalised timeline.</p>
                <div class="metrics-row">
                  <div class="metric-tile">
                    <span class="label" data-i18n="metricConfidence">Confidence score</span>
                    <span class="value" data-metric="confidence">--%</span>
                  </div>
                  <div class="metric-tile">
                    <span class="label" data-i18n="metricSessions">Suggested sessions</span>
                    <span class="value" data-metric="sessions">--</span>
                  </div>
                  <div class="metric-tile">
                    <span class="label" data-i18n="metricRecovery">Recovery window</span>
                    <span class="value" data-metric="window">--</span>
                  </div>
                </div>
                <button type="button" class="download-button" data-i18n="downloadButton">Download summary</button>
              </div>
            </article>
          </aside>
        </div>
      </div>
    </section>
  `;

  mount.innerHTML = template;

  const translations = {
    en: {
      badge: 'AI Guided Module',
      title: 'Advanced Pain Assessment',
      subtitle: 'Follow the guided experience to map your discomfort, understand possible causes, and receive recovery recommendations powered by our physiotherapy AI.',
      step1Title: 'Where is your pain most noticeable?',
      step1Description: 'Select the region that best represents your current discomfort. The AI heatmap will adapt instantly.',
      step2Title: 'How intense and what type of pain are you feeling?',
      step2Description: 'Adjust the slider and choose the sensation that best describes your experience today.',
      step3Title: 'How long has this pain persisted?',
      step3Description: 'Tell us about duration and your current recovery goals so we can tune the plan.',
      intensityLabel: 'Intensity',
      painTypeLabel: 'Pain character',
      notesLabel: 'Add any triggers or notes',
      notesPlaceholder: 'E.g. worse after desk work, improves with rest',
      durationLabel: 'Duration',
      goalPrompt: 'Select your recovery priorities',
      goalMobility: 'Regain mobility & strength',
      goalStability: 'Improve joint stability',
      goalEndurance: 'Boost functional endurance',
      goalRelief: 'Sustain pain relief',
      backButton: 'Back',
      nextButton: 'Next Step',
      finishButton: 'Show results',
      visualTitle: 'Your personalised pain map',
      visualLegend: 'Heat intensity increases with reported pain levels',
      visualInactive: 'No region selected',
      causeTitle: 'Likely pain driver',
      therapyTitle: 'Suggested therapy focus',
      recoveryTitle: 'Estimated recovery outlook',
      causeText: 'Select a body region to reveal possible clinical patterns.',
      therapyText: 'We\'ll outline a hands-on and active plan once inputs are complete.',
      recoveryText: 'Share duration and goals to calculate a personalised timeline.',
      metricConfidence: 'Confidence score',
      metricSessions: 'Suggested sessions',
      metricRecovery: 'Recovery window',
      downloadButton: 'Download summary',
      regions: {
        neck: { title: 'Neck & Upper Spine', desc: 'Tension, stiffness, postural strain' },
        shoulder: { title: 'Shoulder Complex', desc: 'Rotator cuff, impingement, soreness' },
        lower_back: { title: 'Lower Back', desc: 'Lumbar tightness, nerve irritation' },
        knee: { title: 'Knee & Mobility', desc: 'Ligament strain, instability, swelling' }
      },
      painOptions: {
        sharp: 'Sharp / stabbing',
        dull: 'Dull ache',
        throbbing: 'Throbbing / pulsating',
        burning: 'Burning / tingling'
      },
      durationOptions: {
        '0-2': '0 - 2 weeks',
        '2-6': '2 - 6 weeks',
        '6-12': '6 - 12 weeks',
        '12+': '12+ weeks'
      },
      intensityLevels: {
        low: 'mild',
        medium: 'moderate',
        high: 'elevated'
      },
      durations: {
        short: 'short-term irritation',
        medium: 'sub-acute concern',
        long: 'long-standing pattern'
      },
      insights: {
        empty: 'Complete the steps to reveal targeted clinical guidance.',
        cause: {
          neck: 'Your reported pattern suggests cervical muscular guarding and potential nerve sensitisation from desk ergonomics.',
          shoulder: 'Symptoms align with shoulder complex overload‚Äîlikely rotator cuff fatigue with scapular dyskinesis.',
          lower_back: 'Presentation points toward lumbar facet irritation with compensatory core inhibition.',
          knee: 'Findings indicate patellofemoral stress and surrounding soft tissue inflammation.'
        },
        therapy: {
          neck: 'Blend manual release with posture retraining, deep neck flexor activation, and ergonomic micro-breaks.',
          shoulder: 'Prioritise rotator cuff control, scapular setting drills, and gradual load exposure.',
          lower_back: 'Focus on lumbar decompression, core sequencing, and hip mobility restoration.',
          knee: 'Combine patellar tracking work, quadriceps strengthening, and controlled plyometrics.'
        },
        recovery: {
          acute: 'Expect meaningful relief within 2-3 weeks with structured physiotherapy and monitored load.',
          subacute: 'Plan for 4-6 weeks of progressive care with periodic reassessment.',
          chronic: 'Commit to an 8-12 week programme emphasising consistency, pacing, and long-term conditioning.'
        }
      },
      sessions: {
        light: '3-4 sessions',
        medium: '5-7 sessions',
        high: '8-10 sessions'
      },
      summaryTitle: 'Advanced Pain Assessment Summary',
      summaryIntro: 'AI-guided recommendations based on your inputs:'
    },
    hi: {
      badge: '‡§è‡§Ü‡§à ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§ø‡§§ ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤',
      title: '‡§â‡§®‡•ç‡§®‡§§ ‡§¶‡§∞‡•ç‡§¶ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®',
      subtitle: '‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∏‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§Ü‡§à ‡§∏‡•á ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•Ä ‡§§‡§ï‡§≤‡•Ä‡§´ ‡§ï‡§æ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§',
      step1Title: '‡§¶‡§∞‡•ç‡§¶ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡§π‡§æ‡§Å ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?',
      step1Description: '‡§â‡§∏ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Ö‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ï‡•ã ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§è‡§Ü‡§à ‡§π‡•Ä‡§ü‡§Æ‡•à‡§™ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡§¶‡§≤ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§',
      step2Title: '‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•Ä ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?',
      step2Description: '‡§∏‡•ç‡§≤‡§æ‡§á‡§°‡§∞ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§π ‡§Ö‡§®‡•Å‡§≠‡•Ç‡§§‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡•Ä ‡§π‡•à‡•§',
      step3Title: '‡§Ø‡§π ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡•á ‡§π‡•à?',
      step3Description: '‡§Ö‡§µ‡§ß‡§ø ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§∞‡§ø‡§ï‡§µ‡§∞‡•Ä ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§î‡§∞ ‡§∏‡§ü‡•Ä‡§ï ‡§¨‡§® ‡§∏‡§ï‡•á‡•§',
      intensityLabel: '‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ',
      painTypeLabel: '‡§¶‡§∞‡•ç‡§¶ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
      notesLabel: '‡§ï‡•ã‡§à ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞ ‡§Ø‡§æ ‡§®‡•ã‡§ü ‡§ú‡•ã‡§°‡§º‡•á‡§Ç',
      notesPlaceholder: '‡§ú‡•à‡§∏‡•á ‡§°‡•á‡§∏‡•ç‡§ï ‡§µ‡§∞‡•ç‡§ï ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡§¢‡§º‡§§‡§æ ‡§π‡•à, ‡§Ü‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à',
      durationLabel: '‡§Ö‡§µ‡§ß‡§ø',
      goalPrompt: '‡§Ö‡§™‡§®‡•Ä ‡§∞‡§ø‡§ï‡§µ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Å ‡§ö‡•Å‡§®‡•á‡§Ç',
      goalMobility: '‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤‡§§‡§æ ‡§î‡§∞ ‡§∂‡§ï‡•ç‡§§‡§ø ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',
      goalStability: '‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Å',
      goalEndurance: '‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡§π‡§®‡§∂‡§ï‡•ç‡§§‡§ø ‡§¨‡§¢‡§º‡§æ‡§è‡§Å',
      goalRelief: '‡§¶‡§∞‡•ç‡§¶ ‡§∏‡•á ‡§∞‡§æ‡§π‡§§ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç',
      backButton: '‡§µ‡§æ‡§™‡§∏',
      nextButton: '‡§Ö‡§ó‡§≤‡§æ ‡§ö‡§∞‡§£',
      finishButton: '‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç',
      visualTitle: '‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§¶‡§∞‡•ç‡§¶ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞',
      visualLegend: '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§¨‡§¢‡§º‡§§‡•Ä ‡§π‡•à',
      visualInactive: '‡§ï‡•ã‡§à ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡§Ø‡§®‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç',
      causeTitle: '‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§æ‡§∞‡§£',
      therapyTitle: '‡§â‡§™‡§ö‡§æ‡§∞ ‡§´‡•ã‡§ï‡§∏',
      recoveryTitle: '‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§∞‡§ø‡§ï‡§µ‡§∞‡•Ä ‡§∏‡§Æ‡§Ø',
      causeText: '‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï‡§≤ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§',
      therapyText: '‡§á‡§®‡§™‡•Å‡§ü ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§π‡§Æ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§â‡§™‡§ö‡§æ‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡§ó‡•á‡•§',
      recoveryText: '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§Æ‡§Ø‡§∞‡•á‡§ñ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§µ‡§ß‡§ø ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§',
      metricConfidence: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§ï‡•ã‡§∞',
      metricSessions: '‡§∏‡•Å‡§ù‡§æ‡§µ‡§ø‡§§ ‡§∏‡§§‡•ç‡§∞',
      metricRecovery: '‡§∞‡§ø‡§ï‡§µ‡§∞‡•Ä ‡§Ö‡§µ‡§ß‡§ø',
      downloadButton: '‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç',
      regions: {
        neck: { title: '‡§ó‡§∞‡•ç‡§¶‡§® ‡§î‡§∞ ‡§ä‡§™‡§∞‡•Ä ‡§∞‡•Ä‡§¢‡§º', desc: '‡§§‡§®‡§æ‡§µ, ‡§Ö‡§ï‡§°‡§º‡§®, ‡§™‡•ã‡§∏‡•ç‡§ü‡•Å‡§∞‡§≤ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§®' },
        shoulder: { title: '‡§ï‡§Ç‡§ß‡§æ ‡§ï‡•â‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ï‡•ç‡§∏', desc: '‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´, ‡§á‡§Æ‡•ç‡§™‡§ø‡§®‡•ç‡§ú‡§Æ‡•á‡§Ç‡§ü, ‡§¶‡§∞‡•ç‡§¶' },
        lower_back: { title: '‡§®‡§ø‡§ö‡§≤‡§æ ‡§ï‡§Æ‡§∞', desc: '‡§ï‡§∏‡§æ‡§µ, ‡§®‡§∏ ‡§ï‡•Ä ‡§ú‡§≤‡§®' },
        knee: { title: '‡§ò‡•Å‡§ü‡§®‡§æ ‡§î‡§∞ ‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤‡§§‡§æ', desc: '‡§≤‡§ø‡§ó‡§æ‡§Æ‡•á‡§Ç‡§ü ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§®, ‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ, ‡§∏‡•Ç‡§ú‡§®' }
      },
      painOptions: {
        sharp: '‡§§‡•á‡§ú‡§º / ‡§ö‡•Å‡§≠‡§§‡§æ ‡§π‡•Å‡§Ü',
        dull: '‡§Æ‡§Ç‡§¶ ‡§¶‡§∞‡•ç‡§¶',
        throbbing: '‡§ß‡§°‡§º‡§ï‡§§‡§æ / ‡§∏‡•ç‡§™‡§Ç‡§¶‡§ø‡§§',
        burning: '‡§ú‡§≤‡§® / ‡§ù‡§®‡§ù‡§®‡§æ‡§π‡§ü'
      },
      durationOptions: {
        '0-2': '0 - 2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
        '2-6': '2 - 6 ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
        '6-12': '6 - 12 ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
        '12+': '12+ ‡§∏‡§™‡•ç‡§§‡§æ‡§π'
      },
      intensityLevels: {
        low: '‡§π‡§≤‡•ç‡§ï‡§æ',
        medium: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ',
        high: '‡§â‡§ö‡•ç‡§ö'
      },
      durations: {
        short: '‡§Ö‡§≤‡•ç‡§™‡§ï‡§æ‡§≤‡§ø‡§ï ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä',
        medium: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ',
        long: '‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§™‡•à‡§ü‡§∞‡•ç‡§®'
      },
      insights: {
        empty: '‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§ö‡§∞‡§£ ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç‡•§',
        cause: {
          neck: '‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§∏‡•á ‡§™‡§§‡§æ ‡§ö‡§≤‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ó‡§∞‡•ç‡§¶‡§® ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§§‡§®‡§æ‡§µ ‡§î‡§∞ ‡§°‡•á‡§∏‡•ç‡§ï ‡§è‡§∞‡•ç‡§ó‡•ã‡§®‡•â‡§Æ‡§ø‡§ï‡•ç‡§∏ ‡§∏‡•á ‡§®‡§∏ ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§',
          shoulder: '‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ï‡§Ç‡§ß‡•á ‡§™‡§∞ ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§≠‡§æ‡§∞‚Äî‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´ ‡§•‡§ï‡§æ‡§® ‡§î‡§∞ ‡§∏‡•ç‡§ï‡•à‡§™‡•Å‡§≤‡§∞ ‡§Ö‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§',
          lower_back: '‡§∏‡§Ç‡§ï‡•á‡§§ ‡§≤‡§Æ‡•ç‡§¨‡§∞ ‡§´‡•á‡§∏‡§ü ‡§á‡§∞‡§ø‡§ü‡•á‡§∂‡§® ‡§î‡§∞ ‡§ï‡•ã‡§∞ ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§ì‡§∞ ‡§á‡§∂‡§æ‡§∞‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§',
          knee: '‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§™‡§æ‡§ü‡•á‡§≤‡•ã-‡§´‡•á‡§Æ‡•ã‡§∞‡§≤ ‡§§‡§®‡§æ‡§µ ‡§î‡§∞ ‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡•á ‡§Æ‡•Å‡§≤‡§æ‡§Ø‡§Æ ‡§ä‡§§‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ú‡§® ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§'
        },
        therapy: {
          neck: '‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ ‡§∞‡§ø‡§≤‡•Ä‡§ú, ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£, ‡§î‡§∞ ‡§ó‡§π‡§∞‡•á ‡§ó‡§∞‡•ç‡§¶‡§® ‡§´‡•ç‡§≤‡•á‡§ï‡•ç‡§∏‡§∞ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡§£ ‡§ï‡•ã ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§',
          shoulder: '‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£, ‡§∏‡•ç‡§ï‡•à‡§™‡•Å‡§≤‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§°‡•ç‡§∞‡§ø‡§≤, ‡§î‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§ø‡§ï ‡§≤‡•ã‡§° ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§',
          lower_back: '‡§≤‡§Æ‡•ç‡§¨‡§∞ ‡§°‡•Ä-‡§ï‡§Æ‡•ç‡§™‡•ç‡§∞‡•á‡§∂‡§®, ‡§ï‡•ã‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•ç‡§∞‡§Æ‡§£, ‡§î‡§∞ ‡§ï‡•Ç‡§≤‡•ç‡§π‡•á ‡§ï‡•Ä ‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤‡§§‡§æ ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
          knee: '‡§™‡•à‡§ü‡•á‡§≤‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó, ‡§ï‡•ç‡§µ‡§æ‡§° ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§Ç‡§•, ‡§î‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§™‡•ç‡§≤‡§æ‡§Ø‡•ã‡§Æ‡•à‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Å‡•§'
        },
        recovery: {
          acute: '‡§∏‡§Ç‡§∞‡§ö‡§ø‡§§ ‡§´‡§ø‡§ú‡§ø‡§Ø‡•ã‡§•‡•á‡§∞‡•á‡§™‡•Ä ‡§∏‡•á 2-3 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§∞‡§æ‡§π‡§§ ‡§ï‡•Ä ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§',
          subacute: '4-6 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§î‡§∞ ‡§∏‡§Æ‡§Ø-‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§',
          chronic: '8-12 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ï‡§æ ‡§∏‡§§‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§Ö‡§™‡§®‡§æ‡§è‡§Å ‡§ú‡•ã ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞‡§§‡§æ ‡§î‡§∞ ‡§ï‡§Ç‡§°‡•Ä‡§∂‡§®‡§ø‡§Ç‡§ó ‡§™‡§∞ ‡§ú‡•ã‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§'
        }
      },
      sessions: {
        light: '3-4 ‡§∏‡§§‡•ç‡§∞',
        medium: '5-7 ‡§∏‡§§‡•ç‡§∞',
        high: '8-10 ‡§∏‡§§‡•ç‡§∞'
      },
      summaryTitle: '‡§â‡§®‡•ç‡§®‡§§ ‡§¶‡§∞‡•ç‡§¶ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂',
      summaryIntro: '‡§Ü‡§™‡§ï‡•á ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§è‡§Ü‡§à ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç:'
    },
    rg: {
      badge: '‡§è‡§°‡§µ‡§æ‡§Ç‡§∏‡•ç‡§° ‡§ï‡•á‡§Ø‡§∞ ‡§Æ‡•ã‡§°‡•ç‡§Ø‡•Å‡§≤',
      title: '‡§™‡•ç‡§∞‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤ ‡§¶‡§∞‡•ç‡§¶ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®',
      subtitle: '‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ö‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§ó‡•Å‡§ú‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§ø‡§ú‡§ø‡§Ø‡•ã ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§',
      step1Title: '‡§¶‡§∞‡•ç‡§¶ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§ï‡•Å‡§†‡•á ‡§ú‡§æ‡§£‡§µ‡§§‡•ã?',
      step1Description: '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§§‡•ç‡§∞‡§æ‡§∏‡§æ‡§∂‡•Ä ‡§ú‡•Å‡§≥‡§£‡§æ‡§∞‡§æ ‡§≠‡§æ‡§ó ‡§®‡§ø‡§µ‡§°‡§æ. ‡§â‡§∑‡•ç‡§£‡§§‡§æ ‡§®‡§ï‡§æ‡§∂‡§æ ‡§≤‡§ó‡•á‡§ö ‡§¨‡§¶‡§≤‡§§‡•ã.',
      step2Title: '‡§¶‡•Å‡§ñ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™ ‡§ï‡§∏‡•á ‡§Ü‡§π‡•á?',
      step2Description: '‡§∏‡•ç‡§≤‡§æ‡§Ø‡§°‡§∞ ‡§π‡§≤‡§µ‡§æ ‡§Ü‡§£‡§ø ‡§Ö‡§®‡•Å‡§≠‡§µ‡§æ‡§≤‡§æ ‡§∏‡•Å‡§∏‡§Ç‡§ó‡§§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø ‡§®‡§ø‡§µ‡§°‡§æ.',
      step3Title: '‡§π‡§æ ‡§§‡•ç‡§∞‡§æ‡§∏ ‡§ï‡§ø‡§§‡•Ä ‡§ï‡§æ‡§≥‡§æ‡§™‡§æ‡§∏‡•Ç‡§® ‡§Ü‡§π‡•á?',
      step3Description: '‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä ‡§Ü‡§£‡§ø ‡§ß‡•ç‡§Ø‡•á‡§Ø ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§ï‡•É‡§§‡•Ä ‡§Ü‡§∞‡§æ‡§ñ‡§°‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§®‡•á‡§Æ‡§ï‡§æ ‡§π‡•ã‡§à‡§≤.',
      intensityLabel: '‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ',
      painTypeLabel: '‡§¶‡•Å‡§ñ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
      notesLabel: '‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ü‡§ø‡§™‡§æ ‡§≤‡§ø‡§π‡§æ',
      notesPlaceholder: '‡§â‡§¶‡§æ. ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≥ ‡§¨‡§∏‡§≤‡•ç‡§Ø‡§æ‡§®‡§Ç‡§§‡§∞ ‡§µ‡§æ‡§¢‡§§‡•ã, ‡§µ‡§ø‡§∂‡•ç‡§∞‡§æ‡§Ç‡§§‡•Ä‡§®‡•á ‡§ï‡§Æ‡•Ä ‡§π‡•ã‡§§‡•ã',
      durationLabel: '‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä',
      goalPrompt: '‡§∞‡§ø‡§ï‡§µ‡•ç‡§π‡§∞‡•Ä ‡§ß‡•ç‡§Ø‡•á‡§Ø ‡§®‡§ø‡§µ‡§°‡§æ',
      goalMobility: '‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤‡§§‡§æ ‡§Ü‡§£‡§ø ‡§∂‡§ï‡•ç‡§§‡•Ä ‡§™‡§∞‡§§ ‡§Æ‡§ø‡§≥‡§µ‡§æ',
      goalStability: '‡§∏‡§æ‡§Ç‡§ß‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§µ‡§æ‡§¢‡§µ‡§æ',
      goalEndurance: '‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡§π‡§®‡§∂‡§ï‡•ç‡§§‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞‡§µ‡§æ',
      goalRelief: '‡§¶‡•Å‡§ñ‡§£‡§æ‡§§‡•Ç‡§® ‡§¶‡•Ä‡§∞‡•ç‡§ò ‡§Ü‡§∞‡§æ‡§Æ',
      backButton: '‡§Æ‡§æ‡§ó‡•á',
      nextButton: '‡§™‡•Å‡§¢‡•Ä‡§≤ ‡§ö‡§∞‡§£',
      finishButton: '‡§®‡§ø‡§ï‡§æ‡§≤ ‡§™‡§π‡§æ',
      visualTitle: '‡§§‡•Å‡§Æ‡§ö‡§æ ‡§µ‡•à‡§Ø‡§ï‡•ç‡§§‡§ø‡§ï ‡§µ‡•á‡§¶‡§®‡§æ ‡§®‡§ï‡§æ‡§∂‡§æ',
      visualLegend: '‡§®‡§Æ‡•Ç‡§¶ ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡•á‡§®‡•Å‡§∏‡§æ‡§∞ ‡§â‡§∑‡•ç‡§£‡§§‡§æ ‡§µ‡§æ‡§¢‡§§‡•á',
      visualInactive: '‡§≠‡§æ‡§ó ‡§®‡§ø‡§µ‡§°‡§≤‡•á‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä',
      causeTitle: '‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø ‡§ï‡§æ‡§∞‡§£',
      therapyTitle: '‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§¨‡§ø‡§Ç‡§¶‡•Ç',
      recoveryTitle: '‡§∞‡§ø‡§ï‡§µ‡•ç‡§π‡§∞‡•Ä‡§ö‡§æ ‡§Ö‡§Ç‡§¶‡§æ‡§ú',
      causeText: '‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï‡§≤ ‡§™‡•Ö‡§ü‡§∞‡•ç‡§® ‡§™‡§æ‡§π‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§≠‡§æ‡§ó ‡§®‡§ø‡§µ‡§°‡§æ.',
      therapyText: '‡§á‡§®‡§™‡•Å‡§ü ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡•Ç.',
      recoveryText: '‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä ‡§µ ‡§ß‡•ç‡§Ø‡•á‡§Ø ‡§∏‡§æ‡§Æ‡§æ‡§Ø‡§ø‡§ï ‡§ï‡§∞‡§æ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§µ‡•á‡§≥‡§æ‡§™‡§§‡•ç‡§∞‡§ï ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç.',
      metricConfidence: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ó‡•Å‡§£',
      metricSessions: '‡§∏‡•Å‡§ö‡§µ‡§≤‡•á‡§≤‡•á ‡§∏‡•á‡§∂‡§®',
      metricRecovery: '‡§∞‡§ø‡§ï‡§µ‡•ç‡§π‡§∞‡•Ä ‡§ï‡§æ‡§≤‡§ñ‡§Ç‡§°',
      downloadButton: '‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ',
      regions: {
        neck: { title: '‡§Æ‡§æ‡§® ‡§µ ‡§µ‡§∞‡§ö‡§æ ‡§™‡§æ‡§†‡•Ä‡§ö‡§æ ‡§ï‡§£‡§æ', desc: '‡§§‡§æ‡§£, ‡§Ü‡§ñ‡§°‡§£, ‡§™‡•ã‡§∂‡•ç‡§ö‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ' },
        shoulder: { title: '‡§ñ‡§æ‡§Ç‡§¶‡§æ ‡§µ‡§ø‡§≠‡§æ‡§ó', desc: '‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´ ‡§•‡§ï‡§µ‡§æ, ‡§µ‡•á‡§¶‡§®‡§æ' },
        lower_back: { title: '‡§ï‡§Ç‡§¨‡§∞‡•á‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§≠‡§æ‡§ó', desc: '‡§ï‡§°‡§ï‡§™‡§£‡§æ, ‡§®‡§∏ ‡§ö‡§æ‡§≥‡§µ‡§£‡•á' },
        knee: { title: '‡§ó‡•Å‡§°‡§ò‡§æ ‡§µ ‡§π‡§æ‡§≤‡§ö‡§æ‡§≤', desc: '‡§≤‡§ø‡§ó‡§æ‡§Æ‡•á‡§Ç‡§ü ‡§§‡§æ‡§£, ‡§∏‡•Ç‡§ú' }
      },
      painOptions: {
        sharp: '‡§§‡•Ä‡§ï‡•ç‡§∑‡•ç‡§£ / ‡§≠‡•ã‡§∏‡§ï‡§£‡§æ‡§∞‡•á',
        dull: '‡§Æ‡§Ç‡§¶ ‡§¶‡•Å‡§ñ‡§£‡•á',
        throbbing: '‡§ß‡§°‡§ß‡§°‡§£‡§æ‡§∞‡•á',
        burning: '‡§ú‡§≥‡§ú‡§≥ / ‡§Æ‡•Å‡§Ç‡§ó‡•ç‡§Ø‡§æ ‡§Ø‡•á‡§£‡•á'
      },
      durationOptions: {
        '0-2': '0 - 2 ‡§Ü‡§†‡§µ‡§°‡•á',
        '2-6': '2 - 6 ‡§Ü‡§†‡§µ‡§°‡•á',
        '6-12': '6 - 12 ‡§Ü‡§†‡§µ‡§°‡•á',
        '12+': '12+ ‡§Ü‡§†‡§µ‡§°‡•á'
      },
      intensityLevels: {
        low: '‡§π‡§≤‡§ï‡§æ',
        medium: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ',
        high: '‡§ú‡•ã‡§∞‡§¶‡§æ‡§∞'
      },
      durations: {
        short: '‡§§‡§§‡•ç‡§ï‡§æ‡§≥ ‡§§‡•ç‡§∞‡§æ‡§∏',
        medium: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§Æ‡•Å‡§¶‡§§‡•Ä‡§ö‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ',
        long: '‡§ú‡•Å‡§®‡§æ ‡§§‡•ç‡§∞‡§æ‡§∏'
      },
      insights: {
        empty: '‡§∏‡§∞‡•ç‡§µ ‡§ö‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§§‡§Ç‡§§‡•ã‡§§‡§Ç‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡§π‡§æ.',
        cause: {
          neck: '‡§Æ‡§æ‡§®‡•á‡§≤‡§æ ‡§¨‡§∏‡§£‡§æ‡§∞‡•á ‡§§‡§æ‡§£, ‡§∏‡•ç‡§®‡§æ‡§Ø‡•Ç‡§Ç‡§ö‡•Ä ‡§ï‡§°‡§ï‡§™‡§£‡§æ ‡§Ü‡§£‡§ø ‡§¨‡§∏‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§µ‡§Ø‡•Ä‡§Ç‡§Æ‡•Å‡§≥‡•á ‡§π‡•ã‡§£‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤‡§§‡§æ ‡§∏‡•Å‡§ö‡§µ‡§§‡•á.',
          shoulder: '‡§ñ‡§æ‡§Ç‡§¶‡•ç‡§Ø‡§æ‡§µ‡§∞‡•Ä‡§≤ ‡§ì‡§µ‡•ç‡§π‡§∞‡§≤‡•ã‡§°, ‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´ ‡§•‡§ï‡§µ‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§ï‡•Ö‡§™‡•Å‡§≤‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§ï‡§Æ‡•Ä ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§ö‡•á ‡§¶‡§ø‡§∏‡§§‡•á.',
          lower_back: '‡§ï‡§Ç‡§¨‡§∞‡•á‡§§‡•Ä‡§≤ ‡§´‡•á‡§∏‡§ü ‡§ö‡§ø‡§°‡§ö‡§ø‡§° ‡§Ü‡§£‡§ø ‡§ï‡•ã‡§∞ ‡§∏‡•ç‡§®‡§æ‡§Ø‡•Ç‡§Ç‡§ö‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§∏‡§æ‡§¶ ‡§ï‡§Æ‡•Ä ‡§ù‡§æ‡§≤‡•á‡§≤‡§æ ‡§µ‡§æ‡§ü‡§§‡•ã.',
          knee: '‡§ó‡•Å‡§°‡§ò‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§™‡•Ö‡§ü‡•á‡§≤‡§∞ ‡§¶‡§¨‡§æ‡§µ ‡§Ü‡§£‡§ø ‡§∏‡§≠‡•ã‡§µ‡§§‡§æ‡§≤‡§ö‡•ç‡§Ø‡§æ ‡§ä‡§§‡•Ä‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§æ‡§π ‡§ú‡§æ‡§£‡§µ‡§§‡•ã.'
        },
        therapy: {
          neck: '‡§Æ‡•Ö‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡§ø‡§≤‡•Ä‡§ú, ‡§™‡•ã‡§∂‡•ç‡§ö‡§∞ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Ü‡§£‡§ø ‡§°‡•Ä‡§™ ‡§®‡•á‡§ï ‡§´‡•ç‡§≤‡•á‡§ï‡•ç‡§∏‡§∞ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡§£ ‡§ï‡§∞‡§æ.',
          shoulder: '‡§∞‡•ã‡§ü‡•á‡§ü‡§∞ ‡§ï‡§´ ‡§¨‡§≥‡§ï‡§ü‡•Ä, ‡§∏‡•ç‡§ï‡•Ö‡§™‡•Å‡§≤‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§Ü‡§£‡§ø ‡§ï‡•ç‡§∞‡§Æ‡§∂‡§É ‡§≠‡§æ‡§∞ ‡§µ‡§æ‡§¢‡§µ‡§£‡•á ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•á.',
          lower_back: '‡§ï‡§Ç‡§¨‡§∞ ‡§°‡•Ä-‡§ï‡§Æ‡•ç‡§™‡•ç‡§∞‡•á‡§∂‡§®, ‡§ï‡•ã‡§∞ ‡§∏‡§Æ‡§®‡•ç‡§µ‡§Ø ‡§Ü‡§£‡§ø ‡§π‡§ø‡§™ ‡§Æ‡•ã‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§µ‡§æ‡§¢‡§µ‡§æ.',
          knee: '‡§™‡•Ö‡§ü‡•á‡§≤‡§∞ ‡§ü‡•ç‡§∞‡•Ö‡§ï‡§ø‡§Ç‡§ó, ‡§ï‡•ç‡§µ‡§æ‡§° ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§Ç‡§• ‡§Ü‡§£‡§ø ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§™‡•ç‡§≤‡§æ‡§Ø‡•ã‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§µ‡§æ‡§™‡§∞‡§æ.'
        },
        recovery: {
          acute: '‡§∏‡•Å‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§•‡•á‡§∞‡§™‡•Ä‡§®‡•á 2-3 ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§ ‡§†‡•ã‡§∏ ‡§Ü‡§∞‡§æ‡§Æ ‡§Æ‡§ø‡§≥‡•Ç ‡§∂‡§ï‡§§‡•ã.',
          subacute: '4-6 ‡§Ü‡§†‡§µ‡§°‡•á ‡§∏‡§æ‡§§‡§§‡•ç‡§Ø‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§æ‡§≥‡§ú‡•Ä ‡§µ ‡§™‡•Å‡§®‡§∞‡§æ‡§µ‡§≤‡•ã‡§ï‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï.',
          chronic: '8-12 ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§Ç‡§ö‡§æ ‡§†‡§∞‡§æ‡§µ‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§ü‡§ø‡§ï‡§µ‡§£‡•á ‡§´‡§æ‡§Ø‡§¶‡•ç‡§Ø‡§æ‡§ö‡•á.'
        }
      },
      sessions: {
        light: '3-4 ‡§∏‡§§‡•ç‡§∞‡•á',
        medium: '5-7 ‡§∏‡§§‡•ç‡§∞‡•á',
        high: '8-10 ‡§∏‡§§‡•ç‡§∞‡•á'
      },
      summaryTitle: '‡§™‡•ç‡§∞‡§ó‡§§ ‡§µ‡•á‡§¶‡§®‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂',
      summaryIntro: '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§è‡§Ü‡§à‡§ö‡•Ä ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡•Ä:'
    }
  };

  const state = {
    language: 'en',
    step: 0,
    responses: {
      region: null,
      intensity: 4,
      painType: 'sharp',
      notes: '',
      duration: '0-2',
      goals: new Set()
    }
  };

  const cards = Array.from(mount.querySelectorAll('.question-card'));
  const progressFill = mount.querySelector('.progress-fill');
  const progressDots = mount.querySelectorAll('.progress-dot');
  const prevBtn = mount.querySelector('.prev-step');
  const nextBtn = mount.querySelector('.next-step');
  const intensityInput = mount.querySelector('#pain-intensity');
  const intensityOutput = mount.querySelector('#intensity-output');
  const painTypeSelect = mount.querySelector('#pain-type');
  const notesField = mount.querySelector('#pain-notes');
  const durationSelect = mount.querySelector('#pain-duration');
  const checkboxTiles = mount.querySelectorAll('.checkbox-tile');
  const langButtons = mount.querySelectorAll('.lang-btn');
  const bodyVisual = mount.querySelector('.body-visual');
  const activeRegionLabel = mount.querySelector('.active-region');
  const insightTexts = mount.querySelectorAll('[data-i18n-dynamic]');
  const metricValues = {
    confidence: mount.querySelector('[data-metric="confidence"]'),
    sessions: mount.querySelector('[data-metric="sessions"]'),
    window: mount.querySelector('[data-metric="window"]')
  };
  const downloadBtn = mount.querySelector('.download-button');

  function updateLanguage(lang) {
    state.language = lang;
    const dict = translations[lang];
    mount.querySelectorAll('[data-i18n]').forEach((node) => {
      const key = node.dataset.i18n;
      if (dict[key]) {
        node.textContent = dict[key];
      }
    });
    mount.querySelectorAll('[data-i18n-placeholder]').forEach((node) => {
      const key = node.dataset.i18nPlaceholder;
      if (dict[key]) {
        node.placeholder = dict[key];
      }
    });
    mount.querySelectorAll('[data-i18n-option]').forEach((node) => {
      const key = node.dataset.i18nOption;
      const parent = node.closest('select');
      if (dict.painOptions && parent && parent.id === 'pain-type' && dict.painOptions[node.value]) {
        node.textContent = dict.painOptions[node.value];
      }
      if (dict.durationOptions && parent && parent.id === 'pain-duration' && dict.durationOptions[node.value]) {
        node.textContent = dict.durationOptions[node.value];
      }
    });
    mount.querySelectorAll('.region-button').forEach((button) => {
      const region = button.dataset.region;
      const label = dict.regions[region];
      if (label) {
        const [titleNode, descNode] = button.children;
        titleNode.textContent = label.title;
        descNode.textContent = label.desc;
      }
    });
    const nextLabel = state.step === cards.length - 1 ? dict.finishButton : dict.nextButton;
    nextBtn.textContent = nextLabel;
    prevBtn.textContent = dict.backButton;
    downloadBtn.textContent = dict.downloadButton;
    renderInsights();
  }

  function updateProgress() {
    const percent = ((state.step + 1) / cards.length) * 100;
    progressFill.style.width = `${percent}%`;
    progressDots.forEach((dot) => {
      const dotStep = Number(dot.dataset.step);
      dot.classList.toggle('active', dotStep <= state.step);
    });
    cards.forEach((card, index) => {
      card.hidden = index !== state.step;
    });
    prevBtn.disabled = state.step === 0;
    const dict = translations[state.language];
    nextBtn.textContent = state.step === cards.length - 1 ? dict.finishButton : dict.nextButton;
  }

  function renderInsights() {
    const dict = translations[state.language];
    const { region, intensity, duration, goals, painType } = state.responses;

    let intensityDescriptor = dict.intensityLevels.low;
    if (intensity >= 7) intensityDescriptor = dict.intensityLevels.high;
    else if (intensity >= 4) intensityDescriptor = dict.intensityLevels.medium;

    let durationKey = 'short';
    if (duration === '2-6') durationKey = 'medium';
    else if (duration === '6-12' || duration === '12+') durationKey = 'long';

    const regionLabel = region ? dict.regions[region].title : dict.visualInactive;
    activeRegionLabel.textContent = regionLabel;
    bodyVisual.className = `body-visual${region ? ` region-${region}` : ''}`;

    insightTexts.forEach((node) => {
      const key = node.dataset.i18nDynamic;
      let text = dict[key];
      if (key === 'causeText') {
        text = region ? dict.insights.cause[region] : dict.insights.empty;
      }
      if (key === 'therapyText') {
        text = region ? dict.insights.therapy[region] : dict.insights.empty;
      }
      if (key === 'recoveryText') {
        if (!duration) {
          text = dict.insights.empty;
        } else if (duration === '0-2') {
          text = dict.insights.recovery.acute;
        } else if (duration === '2-6') {
          text = dict.insights.recovery.subacute;
        } else {
          text = dict.insights.recovery.chronic;
        }
      }
      node.textContent = text;
    });

    const baseConfidence = 60;
    const regionBoost = region ? 8 : 0;
    const intensityBoost = Math.round(intensity * 2.6);
    const durationPenalty = duration === '12+' ? 6 : duration === '6-12' ? 3 : 0;
    const confidenceScore = Math.min(96, baseConfidence + regionBoost + intensityBoost - durationPenalty);
    metricValues.confidence.textContent = `${confidenceScore}%`;

    let sessionKey = 'light';
    if (intensity >= 7 || duration === '6-12' || duration === '12+') sessionKey = 'high';
    else if (intensity >= 5 || duration === '2-6') sessionKey = 'medium';
    metricValues.sessions.textContent = translations[state.language].sessions[sessionKey];

    let recoveryWindow = dict.durationOptions[duration] || '--';
    if (duration === '0-2') recoveryWindow = dict.insights.recovery.acute;
    else if (duration === '2-6') recoveryWindow = dict.insights.recovery.subacute;
    else recoveryWindow = dict.insights.recovery.chronic;
    metricValues.window.textContent = recoveryWindow;

    const overlay = bodyVisual.querySelector('.heatmap-overlay');
    overlay.style.opacity = region ? '0.8' : '0';
    overlay.style.filter = `blur(${Math.max(6, intensity * 1.2)}px)`;
    overlay.style.transform = `scale(${1 + intensity * 0.04})`;
  }

  function syncStateFromUI() {
    state.responses.intensity = Number(intensityInput.value);
    state.responses.painType = painTypeSelect.value;
    state.responses.notes = notesField.value.trim();
    state.responses.duration = durationSelect.value;
    state.responses.goals = new Set(
      Array.from(checkboxTiles)
        .filter((tile) => tile.querySelector('input').checked)
        .map((tile) => tile.querySelector('input').value)
    );
  }

  mount.querySelectorAll('.region-button').forEach((button) => {
    button.addEventListener('click', () => {
      mount.querySelectorAll('.region-button').forEach((btn) => btn.classList.remove('active'));
      button.classList.add('active');
      state.responses.region = button.dataset.region;
      renderInsights();
    });
  });

  intensityInput.addEventListener('input', (event) => {
    intensityOutput.textContent = event.target.value;
    syncStateFromUI();
    renderInsights();
  });

  painTypeSelect.addEventListener('change', () => {
    syncStateFromUI();
    renderInsights();
  });

  notesField.addEventListener('input', () => {
    syncStateFromUI();
  });

  durationSelect.addEventListener('change', () => {
    syncStateFromUI();
    renderInsights();
  });

  checkboxTiles.forEach((tile) => {
    const input = tile.querySelector('input');
    tile.addEventListener('click', (event) => {
      if (event.target.tagName !== 'INPUT') {
        input.checked = !input.checked;
      }
      syncStateFromUI();
      tile.classList.toggle('active', input.checked);
    });
  });

  prevBtn.addEventListener('click', () => {
    if (state.step === 0) return;
    state.step -= 1;
    updateProgress();
    updateLanguage(state.language);
  });

  nextBtn.addEventListener('click', () => {
    if (state.step < cards.length - 1) {
      state.step += 1;
      updateProgress();
      updateLanguage(state.language);
    } else {
      renderInsights();
    }
  });

  langButtons.forEach((button) => {
    button.addEventListener('click', () => {
      langButtons.forEach((btn) => btn.classList.remove('active'));
      button.classList.add('active');
      updateLanguage(button.dataset.lang);
    });
  });

  downloadBtn.addEventListener('click', () => {
    const dict = translations[state.language];
    const goals = Array.from(state.responses.goals)
      .map((goal) => dict[`goal${goal.charAt(0).toUpperCase() + goal.slice(1)}`])
      .filter(Boolean);
    const summary = [
      dict.summaryTitle,
      '--------------------------------',
      `${dict.subtitle}`,
      '',
      `${dict.regions[state.responses.region]?.title || dict.visualInactive}`,
      `Intensity: ${state.responses.intensity}`,
      `${dict.painTypeLabel}: ${dict.painOptions[state.responses.painType]}`,
      `${dict.durationLabel}: ${dict.durationOptions[state.responses.duration]}`,
      goals.length ? `${dict.goalPrompt}: ${goals.join(', ')}` : '',
      state.responses.notes ? `Notes: ${state.responses.notes}` : '',
      '',
      `${translations[state.language].causeTitle}: ${mount.querySelector('[data-i18n-dynamic="causeText"]').textContent}`,
      `${translations[state.language].therapyTitle}: ${mount.querySelector('[data-i18n-dynamic="therapyText"]').textContent}`,
      `${translations[state.language].recoveryTitle}: ${mount.querySelector('[data-i18n-dynamic="recoveryText"]').textContent}`,
      '',
      `${dict.metricConfidence}: ${metricValues.confidence.textContent}`,
      `${dict.metricSessions}: ${metricValues.sessions.textContent}`,
      `${dict.metricRecovery}: ${metricValues.window.textContent}`
    ]
      .filter(Boolean)
      .join('\n');

    const blob = new Blob([summary], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = 'pain-assessment-summary.txt';
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);
    URL.revokeObjectURL(url);
  });

  updateProgress();
  updateLanguage(state.language);
  syncStateFromUI();
  renderInsights();
});
